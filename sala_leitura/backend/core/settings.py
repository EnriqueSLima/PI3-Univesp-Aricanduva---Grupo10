"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import django_heroku


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# *** Configuração padrão do Django ***

## SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-+3#%w-w277+qlbys5nl$86q#o#s%j$07#8cpn3(bh_mtbtm!mg'
#
## SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
#
#ALLOWED_HOSTS = []

# *** Configuração para o ambiente ***
#from dotenv import load_dotenv
#
#load_dotenv()  # Carrega variáveis do .env
#
## Configurações críticas com fallback seguro
#SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-key-32-chars-dev-only')  # Adicione um fallback para desenvolvimento
#
## DEBUG com tratamento mais robusto
#DEBUG = os.getenv('DEBUG', 'False').lower() == 'false'  # Converte para booleano corretamente
#
## ALLOWED_HOSTS com fallback e tratamento para string vazia
#allowed_hosts = os.getenv('ALLOWED_HOSTS', '')
#ALLOWED_HOSTS = allowed_hosts.split(',') if allowed_hosts else []


from dotenv import load_dotenv
import dj_database_url

# Carrega variáveis do .env
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# Configuração de segurança com fallback
SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-dev-key-32-chars-minimum-123456')

# DEBUG com tratamento inteligente
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# ALLOWED_HOSTS com tratamento robusto
allowed_hosts = os.getenv('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts.split(',') if host.strip()] or ['*'] if DEBUG else []

# Configuração do banco de dados
DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', f'sqlite:///{BASE_DIR}/db.sqlite3'),
        conn_max_age=600,
        ssl_require=not DEBUG
    )
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',       # Para APIs
    'sala_leitura',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}

# Banco de dados (Heroku injeta DATABASE_URL)
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#    }
#}
#import dj_database_url
#from pathlib import Path
#
#BASE_DIR = Path(__file__).resolve().parent.parent
#
#DATABASES = {
#    'default': dj_database_url.config(
#        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
#        conn_max_age=600,
#        ssl_require=True
#    )
#}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'sala_leitura.Usuario'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Arquivos estáticos (Whitenoise)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'backend/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Ativa configurações Heroku
django_heroku.settings(locals())

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirecionamentos Login e Logout
LOGIN_REDIRECT_URL = '/sala_leitura/home/'
LOGOUT_REDIRECT_URL = '/sala_leitura/'

# API REST
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ]
}